README - Εργασία 2
Ηλίας Καλαμάτας || 1115201400053
Εαρινό εξάμηνο - Ακαδημαϊκού έτους "2020-2021"

Η εργασία περιλαμβάνει δύο φακέλους:
- Bash_Script : Αρχεία σχετικά με τη δημιουργία bash script για την παραγωγή τυχαίων δεδομένων, που δίνονται ως είσοδος στην εφαρμογή
- App: Αρχεία σχετικά με την υλοποίηση όλων των λειτουργιών της εφαρμογής

** Μεταγλώτισση και Εκτέλεση **
- Για το bash script:
1. Ίσως χρειαστεί αλλαγή σε δικαιώματα, ώστε να μπορεί να πραγματοποιηθεί εκτέλεση -> chmod 777 create_infiles.sh
2. Παράδειγμα εκτέλεσης ./create_infiles.sh inputFile CountryLogs 3

- Για την εφαρμογή:
1. Η μεταγλώττιση γίνεται με makefile και υπάρχουν οι εξής επιλογές:
	α) make all (δημιουργία/ανανέωση travelMonitor + Monitor)
	β) make travelMonitor
	γ) make Monitor
	δ) make clean (καθαρισμός εκτελέσιμων και .o αρχείων)
2. Ενδεικτική Εκτέλεση: ./travelMonitor -m 3 -b 200 -s 1000 -i ../Bash_Script/CountryLogs 
(Προσοχή: έχει θεωρηθεί δεδομένο ότι ο buffer, που θα χρησιμοποιηθεί, είναι τουλάχιστον 200bytes)

** Διαχωρισμός Αρχείων Εφαρμογής App **
1. InputHandler (.cpp + .h) --> Περιέχει κλάση με απαραίτητες μεθόδους για τη διαχείρηση εισόδου της εφαρμογής + Συναρτήσεις για σύγκριση Dates
2. HashUtil (.cpp + .h) --> Περιέχει συναρτήσεις, που υλοποιούν Hashing Algorithms
3. CitizenRecords (.cpp + .h) --> Περιέχει κλάσεις σχετικές με την αποθήκευση δεδομένων
4. BloomFilter (.cpp + .h) --> Κλάσεις για την υλοποίηση του Bloom Filter και της λίστας των Bloom Filters 
5. SkipList (.cpp + .h) --> Κλάσεις για την υλοποίηση της Skip List και της λίστας των Skip Lists
7. TravelRecords (.cpp + .h) --> Κλάσεις για την αποθήκευση πληροφοριών σχετικά με τα Travel Requests
8. Monitor (.cpp) --> Η εφαρμογή, που τρέχει το κάθε child process
6. main (.cpp) --> Η κύρια εφαρμογή

** Γενικές 'Παραδοχές' και Επεξηγήσεις **
- Αποθήκευση ονοματεπώνυμου σε μία μεταβλητή
- Για το bash script:
	* Έλεγχος ορισμάτων -> αν περιλαμβάνει το αρχείο εισόδου, έλεγχος για αριθμητικό όρισμα, έλεγχος αν το directory υπάρχει ήδη και έλεγχος αριθμού ορισμάτων
	* Διατρέχουμε το αρχείο μια φορά για να πάρουμε τον αριθμό των χωρών
	* Δημιουργούμε directory για κάθε χώρα και τον απαραίτητο αριθμό άδειων .txt αρχείων
	* Μοιράζουμε διαδοχικά μία-μία τις εγγραφές στα αρχεία αυτά
- Για την εφαρμογή:
>Οι παρατηρήσεις που ακολουθούν αφορούν κυρίως παραδοχές, καθώς σημεία του κώδικα γίνονται κατανοητά με την ύπαρξη σχολιασμού.
	* Έλεγχος αριθμού και ορθότητα ορισμάτων
	* Χρήση 2 pipes ανά process i (ένα για write (από 0 έως i-1) + ένα για read (από i μέχρι 2i-1).
	* Όταν το child process είναι έτοιμο αποστέλει 1 στο parent
	* Στο parent process: Χρήση μεταβλητής term_flag για τερματισμό του parent process ύστερα από ανάλογο singal και child_flag για αναγνώριση process, που πρέπει να ξαναγίνει fork
	* Στα child procress: Χρήση sig_flag για να αναγνώριζει σήματος και αντίστοιχης ενέργειας. Δηλαδή, 1 σε περίπτωση τερματισμού λόγω π.χ. interrupt, 2 σε περίπτωση που έχει προστεθεί κάποιο νέο αρχείο προς ανάγνωση και 3 σε περίπτωση που πρέπει να απαντήσει σε αιτήματα (υλοποίηση με SIGUSR2). Στην περίπτωση του 3, τότε το parent process ακολουθεί με αποστολή 0 για αποστολή απάντησης σε /travelRequest ή 1 για αποστολή απάντησης σε /searchVaccinationStatus
>Σημείωση: Για την ημερομηνία ο έλεγχος δεν είναι 100% αυστηρός αλλά δεχόμαστε τα εξής:
	* Χωρίζεται με παύλες (ενημέρωση στο \help)
	* Πρέπει να ξεκινάει με αριθμό και να τελειώνει με 4 αριθμούς
	* Ελέγχεται η ύπαρξη παύλας μετά τη μέρα και πριν τη χρονολογία
	* Δεχόμαστε ότι εφόσον ισχύουν τα παραπάνω λογικά θα πρέπει να έχει δοθεί σωστά
